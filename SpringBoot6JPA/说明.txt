1.JPA的介绍
      Jpa是Java Persistence API的意思，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。
      jpa使用起来非常方便和使用，jpa具有什么优势？
      1，标准化
      JPA 是 JCP 组织发布的 Java EE 标准之一，因此任何声称符合 JPA 标准的框架都遵循同样的架构，提供相同的访问API，
      这保证了基于JPA开发的企业应用能够经过少量的修改就能够在不同的JPA框架下运行。
      2，容器级特性的支持
      JPA框架中支持大数据集、事务、并发等容器级事务，这使得 JPA 超越了简单持久化框架的局限，在企业应用发挥更大的作用。
      3，简单方便
      JPA的主要目标之一就是提供更加简单的编程模型：在JPA框架下创建实体和创建Java 类一样简单，没有任何的约束和限制，只
      需要使用 javax.persistence.Entity进行注释，JPA的框架和接口也都非常简单，没有太多特别的规则和设计模式的要求，
      开发者可以很容易的掌握。
      4，查询能力
      JPA的查询语言是面向对象而非面向数据库的，它以面向对象的自然语法构造查询语句，可以看成是Hibernate HQL的等价物。
      JPA定义了独特的JPQL（Java Persistence Query Language），JPQL是EJB QL的一种扩展，它是针对实体的一种查询语言，
      操作对象是实体，而不是关系数据库的表，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL
      才能够提供的高级查询特性，甚至还能够支持子查询。
      5，高级特性
      JPA 中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，
      这样的支持能够让开发者最大限度的使用面向对象的模型设计企业应用，而不需要自行处理这些特性在关系数据库的持久化。
2.JPA注解的使用
    @Entity：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略
    @MappedSuperClass:用在确定是父类的entity上。父类的属性子类可以继承。
    @NoRepositoryBean:一般用作父类的repository，有这个注解，spring不会去实例化该repository。
    @Column：如果字段名与列名相同，则可以省略。
    @Id：表示该属性为主键。指定的类的属性，用于识别（一个表中的主键）
    @GeneratedValue(strategy = GenerationType.SEQUENCE,generator = “repair_seq”)：表示主键生成策略是sequence
    （可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。
    @SequenceGeneretor(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，
    以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。
    @Transient：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,
    ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式
    @JsonIgnore：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。
    @JoinColumn（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。
    @OneToOne、@OneToMany、@ManyToOne：对应hibernate配置文件中的一对一，一对多，多对一。
    @Table 声明表名。
    @Basic 指定非约束明确的各个字段。
    @Embedded 指定类或它的值是一个可嵌入的类的实例的实体的属性。
    @GeneratedValue 指定如何标识属性可以被初始化，例如自动、手动、或从序列表中获得的值。
    @Transient 指定的属性，它是不持久的，即：该值永远不会存储在数据库中。
    @Column 指定持久属性栏属性。
    @SequenceGenerator 指定在@GeneratedValue注解中指定的属性的值。它创建了一个序列。
    @TableGenerator 指定在@GeneratedValue批注指定属性的值发生器。它创造了的值生成的表。
    @AccessType 这种类型的注释用于设置访问类型。如果设置@AccessType（FIELD），则可以直接访问变量并且不需要getter和setter，但必须为public。如果设置@AccessType（PROPERTY），通过getter和setter方法访问Entity的变量。
    @JoinColumn 指定一个实体组织或实体的集合。这是用在多对一和一对多关联。
    @UniqueConstraint 指定的字段和用于主要或辅助表的唯一约束。
    @ColumnResult 参考使用select子句的SQL查询中的列名。
    @ManyToMany 定义了连接表之间的多对多一对多的关系。
    @ManyToOne 定义了连接表之间的多对一的关系。
    @OneToMany 定义了连接表之间存在一个一对多的关系。
    @OneToOne 定义了连接表之间有一个一对一的关系。
    @NamedQueries 指定命名查询的列表。
    @NamedQuery 指定使用静态名称的查询。
3.

